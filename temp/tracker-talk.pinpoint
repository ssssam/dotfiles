# Sam's tracker talk for GUADEC 2015

# Goals
# - everyone understands Tracker
# - everyone who understands Tracker from a few
#   years ago knows what is new
# - I can have lots of info for all the music on
#   my computer 
# - and all of the junk there in general
# - plan of action that is achievable

Tracker: introduction and reflection

# 40 mins. ??

1. < 15 mins

# Hi, I'm Sam. I'm not a core Tracker developer,
# but I have been involved with it on the
# sidelines for several years, and fixed up some
# bugs and test cases.

# The goal of this talk is basically to focus on
# what Tracker is and what its place in GNOME
# should be. Sounds easy? Well, there's a lot *of*
# Tracker, things it can do well but doesn't,
# things it can't do well but does anyway, etc.

# I have a lot of stuff to get through. (How many
# people are familiar with what Tracker does? How
# many people have no idea why it exists or what
# use they might have for it?)

# OK. Well Tracker describes itself in a few ways.
# On <https://wiki.gnome.org/Projects/Tracker>
# it's called a "search engine, search tool and
# metadata storage system."
#
# I prefer to think of the vision of the "database
# filesystem".

---
The "database filesystem"

# That's quite an old term now so maybe it's not
# useful for me to use it. It's
# at least 20 years old: Microsoft were looking at
# "Cairo" (later "WinFS") since 1995.[1]
#
# 1: https://en.wikipedia.org/wiki/WinFS
#
### TODO:  point to more stuff on this
#
# Notably, nobody has actually really achieved
# this yet. Tracker is really at the forefront.
# (Anyone know of anything)? I once had a guy try
# to tell me that Tracker didn't actually exist.

---

路 Store arbitrary metadata
路 Multiple ways of organising files
路 Fast searching
路 Advanced queries

# The UNIX filesystem is clearly a great design,
# we've been using it since the early 1970s (older
# than some of us here) and it still holds up well.

# These are all things you can't do with the
# filesystems POSIX provides, without extra code.

# A "database filesystem" can extend rather than
# replace what we have now. Given how fundamental
# a filesystem is to all our programs, it has to!
# Tracker currently works by sitting above the
# filesystem.

# This is how I became interested in Tracker: my
# computer is full of shit and I don't really want
# to tidy it up. Writing software is a lot more
# interesting.
#
# In particular, I've never been happy with
# existing music player software. I've always
# wanted to track much more data about the songs
# than can be expressed using ID3 tags. It seemed
# like Tracker's file system crawler and metadata
# store would be a good storage backend for such a
# music player.

--

How Tracker works
(2015 edition)

# Tracker has been in development for a while:
# first commit in tracker.git is 10 years ago,
# from Jamie McCracken. Most active between 2009
# and 2012, which roughly coincides with Nokia
# sponsorship. But development is continuing, cool
# improvements have been landing every so often
# right up to this year. (Anyone there who has
# patches in Tracker?)

# It's not just a GNOME project. I'll go into "who
# uses Tracker" later on, but note that (partly
# due to the huge Nokia contributions) it's well
# suited to embedded and is still used there too.
# Tracker is (too) configurable to suit multiple
# domains.

-------

'tracker' binary

# This is new in 1.4.0, if you run an old distro
# you'll have older `tracker-control`,
# `tracker-sparql`, etc. The new tool is *much*
# nicer than before.
#
# (DEMO!)
# Show status:
#   tracker daemon
#   tracker status
#
# Query all info for a file:
#   tracker info ~/Music/..
#
# Search:
#   tracker search monkey
#
# Tag:
#   tracker tag --list
#   tracker tag ~ --add home
#   tracker tag --list home
#
# SPARQL / SQL: (tracker sparql / sql)
#
# Destroy all your data: (tracker reset)

# 7,200 significant lines of C.

-------

tracker-store

# Database. Thin wrapper over SQLite. SQLite is
# widely used, sustainable. Releases sometimes
# buggy (3 stable releases are blacklisted in
# Tracker's ./configure due to bugs that break
# Tracker in some way).

# ~6,000 significant lines of Vala, 16,000 significant lines of C.

# 'Triple store' -- more flexible way of storing
# data than SQL -- can store arbitrary graphs
# rather than predefined tables.

# The tracker-store is actually a really good
# triple store, although limited in some ways.

# Comparable to: OpenLink Virtuoso: enourmous,
# "enterprise-scale". Horrible to work with. KDE
# abandoned it. Also Neo4j (Java), 4store (new,
# promising).

-------

Nepomuk

<small><i>
"Networked Environment
for Personalized,
Ontology-based Management
of Unified Knowledge"
</i></small>

# Anything with "networked" and "environment" in
# its name must be doomed to failure...

# If tracker-store stores arbitrary graphs. If
# you're familiar with relational databases but
# not RDF, you might be thinking "how do you know
# what any of the data means if you don't have a
# schema?"

# NEPOMUK provides the database schemas.

# (Who knows about RDF?) I haven't gone into RDF
# at all yet and I'm not going to go far, for
# the same reason I'm not going to explain
# x86 machine code or the GNU C library.
#
# If searching for help on RDF you can get really
# tangled in formal specifications and academic
# papers. The concepts are actually quite simple.

# Just like you wouldn't read the HTML spec in
# order to make your first website, don't try to
# read the RDF specs first, find a tutorial.

# NEPOMUK developed a bunch of ways of talking
# about desktop data, "ontologies". Ontology means
# the same as "schema" in this context.
#
# As far as I know Nepomuk is now only used by
# Tracker. KDE used it for a while.
#
### Show off the Nepomuk ontologies?

-------

D-Bus

<tt>org.freedesktop.Tracker1</tt>

# tracker-store is a central daemon, communicate
# with it over D-Bus.

-------

libtracker-sparql

# Library wrapping D-Bus interface, plus an
# in-process "read" interface.
#
# You can insert data and query data using SPARQL.

-------

tracker-extract and tracker-miner-fs

# You can write metadata direct to tracker-store,
# but most programs don't. Most can't, e.g.
# tag an MP3 on your phone, copy in to PC.

### Demo tracker-extract ?
#
# tracker-extract extracts embedded metadata from
# a file, and converts it to NEPOMUK format. It
# outputs a SPARQL query that you can run to
# insert data in the store.

# tracker-extract: ~18K significant lines of C

# tracker-miner-fs is I think most complex
# component. Also most controversial.
#
# Its job is to crawl all trees that need
# indexing, and monitor for changes. Runs as a
# background process triggered by filesystem
# events -- recipe for trouble. But also necessary
# for Tracker to be at all useful.
#
# tracker-miner-fs: ~20K significant lines of C.

-------

gnome-online-miners

# A separate repo of miners to mirror data from
# online.
#
### TODO: investigate!!

-------

Pros and cons of the
current Tracker code

2. 10 mins

---

pro: Integrates with existing filesystem

# You don't have to give up anything in order to
# benefit from Tracker.

-------

pro: Well-specified interfaces between all components, small C and D-Bus API

# RDF and SPARQL have a big crew of W3C people
# looking after them, and
# have long, detailed standards. Lots of work
# already done.

-------

pro: Reuses SQLite3

----

pro: Reuses RDF

-------

pro: Integrated into the
desktop somewhat already

# e.g. tracker-prefs tool

-----

<span strikethrough="true">con: Slow</span>

# Tracker 0.14 and older contained some nasty bugs
# that could cause it to enter a busyloop. If you
# saw tracker-miner-fs chewing 100% until you
# killed it, you hit that bug -- sorry!

# It's still possible to create a configuration
# that will slow down your computer sometimes --
# enable indexing of removable devices and plug in
# removable hard disk with 100K files, for
# example. Or clone linux.git 10 times in
# ~/Downloads.

# One big issue remains: Linux doesn't provide an
# interface for notifying on filesystem changes
# /recursively/. So we abuse 'inotify' to achieve
# that.

-------

con: Code is complex
(especially tracker-miner-fs)

# miner-fs is *really* asynchronous. Super hard to
# reason about... this is why the 'Tracker eats
# all my CPU bugs' survived for so long!

# Asynchronous GLib code is *beyond* spaghetti
# code, and outside into total abstract 4
# dimensional space code..

# I'd love to delete some of it. But it's all
# intertwined!

-------

con: NEPOMUK does not
tie in closely with other
Linked Data ontologies
the Semantic Web

# Since KDE abandoned NEPOMUK, it doesn't really get used anywhere except
# Tracker!

-------

con: ontologie map directly
to database schema, which
makes ontology changes
hard to handle

# It might have been better to consider RDF a
# presentation layer, rather than tying the actual
# storage layer to the RDF schema.
#
# If a property from an ontology is deleted,
# do we need to delete rows involving that
# property? Is that the main problem?
#
# FIXME: research

-------

con: All information stored in one file (in XDG_CACHE_DIR!)

# Easy to delete by accident. Even a command to do
# it! (`tracker reset`)).

-------

con: watching for
database updates is
hard

<tt>GraphUpdated</tt>

# QSparql did solve this, and it'd be possible for
# us to as well. But it's hard: the API Tracker
# exposes is horrid.

--

# 3. 5 mins

Who's using it?

## FIXME: screenshots

-------

Tracker Search Tool

-------

Gnome Photos

-------

Gnome Music

-------

Gnome Documents

-------

Grilo

-------

Jolla

-------

GENIVI?

tracker-ivi fork

-------

other embedded devices (maybe not)

set top box, IVI.

# light-media-scanner might well have done a better job.

-------

The tale of the 3 abstraction layers

# tracker-enumerator, tracker-decorator, Grilo

### FIXME: make a chart

---

# 4. 10 mins

Big plans

--- [bg-ripitup.jpg]

<span strikethrough="true">Rip it up and start again</span>

# It's almost always a bad idea to rewrite
# something from scratch.

# I'm going to assume that we still want the
# database filesystem, too.

-------

Baloo

# Much better than throwing it away would be to
# cooperate with other people.
### FIXME: research and describe Baloo

-------

Define the scope!




-------

Indexing content on the filesystem

    - tracker-extract and tracker-miner-fs are really good at this
      *years* of work gone into it

--------

Scanning removable media

    - good at this too, but disabled by default because eager scanning
      of a huge HD is a waste of resources.

--------------

An RDF store

    - tracker-store is a good implementation for some cases
    - it might make more sense to move to a different store in future
      and turn RDF and SPARQL into a presentation layer only. But no
      urgent need for that.

--------------

Mirroring information from remote sources?

    - playlists from YouTube / Spotify / ...
    - email... ?

*Not* caching -- that's an implementation detail

Mirroring -- yes. Should be opt-in, probably in
gnome-online-accounts. Tracker will only be *part* of a mirroring
solution in most cases!

tracker-mirroring-tool, gnome-online-mirror-tool, ... ?

---------------

Allowing querying *all* the user's metadata

    - search: gnome-shell approach seems better (multiple pluggable search
      providers)
    - does anyone *actually* want to run SPARQL queries across *all* their
      metadata? If so, can we use federated SPARQL queries?

# I struggle to think of many actual examples of
# advanced queries...


----------------


Small plans

# nobody is funded full time on Tracker!

-------

installed-tests

-------

Split up store from extractor and miner, etc

# libmediaart happened already
# more stuff from libtracker-common could split out

-------

Allow applications to choose their own store
and their own set of ontologies

# But how do you query between them?

-------

Add more 'decorators'

-------

Create view widgets that live-update
based on a query from the database

-------

Implement opt-in scanning of removable devices

- Felipe Borges GSOC project

-------

Improve the documentation

http://wiki.gnome.org/Projects/Tracker


----

Keep plugins up to date
