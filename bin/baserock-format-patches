#!/usr/bin/python

# baserock-format-patches: Format patches for baserock-dev@baserock.org
#
# Copyright (C) 2014  Sam Thursfield
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
import os
import re
import subprocess
import sys


def get_remote_fetch_url(remote_name):
    # insteadOf rules can defeat this check, but that's your problem.
    try:
        text = subprocess.check_output(
                ['git', 'config', '--get', 'remote.%s.url' % remote_name])
        fetch_url = text.strip()
    except subprocess.CalledProcessError:
        sys.stderr.write("Remote %s does not seem to exist. Use "
                         "--remote-name.\n" % remote_name)
        sys.exit(1)
    return fetch_url


def get_branch():
    status = subprocess.check_output(
        ['git', 'status', '--branch', '--porcelain'])
    branch_line = status.split('\n')[0]
    branch_line = branch_line[3:]
    if '...' in branch_line:
        branch_line = branch_line[0:branch_line.find('...')]
    return branch_line


def get_sha1(ref):
    return subprocess.check_output(['git', 'rev-parse', ref]).strip()


def check_branch_pushed(remote_name, branch):
    status = subprocess.call(
        ['git', 'rev-parse', 'remotes/%s/%s' % (remote_name, branch)],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return status != 0


def prepare_cover_letter(remote_url, branch):
    sha1 = get_sha1(branch)

    header_text = '\n'.join([
        "Repository: %s" % remote_url,
        "Ref: %s" % branch,
        "Sha1: %s " % sha1,
    ])

    with open('outgoing/0000-cover-letter.patch', 'r') as f:
        cover_letter_text = f.read()

    parts = cover_letter_text.split('\n\n', 1)
    cover_letter_text = '\n\n'.join([parts[0], header_text, parts[1]])

    with open('outgoing/0000-cover-letter.patch', 'w') as f:
        f.write(cover_letter_text)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--to', default='origin/master',
        help="Parent branch of the feature branch being sent for review "
             "(default 'master')")
    parser.add_argument(
        '--remote-name', '-r', default='origin',
        help="Name of remote that this branch would be pushed to (either Git "
             "remote name or full repository URL, default 'origin')")

    args = parser.parse_args()

    if os.path.exists('outgoing'):
        sys.stderr.write("outgoing/ directory already exists. Not overwriting!\n")
        sys.exit(1)

    branch = get_branch()
    remote_url = get_remote_fetch_url(args.remote_name)

    command = 'git format-patch -o outgoing --cover-letter --find-renames %s' % args.to
    subprocess.check_call(command.split(' '))

    prepare_cover_letter(remote_url, branch)

    if check_branch_pushed(args.remote_name, branch):
        sys.stderr.write(
            "Don't forget to push -- branch %s/%s does not exist!\n" %
            (args.remote_name, branch))


if __name__ == '__main__':
    main()
